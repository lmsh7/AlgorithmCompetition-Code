#include <bits/stdc++.h>
using namespace std;

const int N = 5e5 + 10;
const int M = 1e5 + 10;
typedef long long ll;

typedef pair <long long, long long>  Pll;

ll a[N], ans[N << 2];
ll lmax[N << 2], rmax[N << 1], sum[N << 2];


inline ll ls(ll x) {
	return x << 1;
}

inline ll rs (ll x) {
	return x << 1 | 1;
}

struct Node {
	ll _ans, _lmax, _rmax, _sum;
};

inline void push_up(ll p) {
		// printf("ans[%lld] = %lld\n", rs(p), ans[rs(p)]);

	ans[p] = max({ans[ls(p)], ans[rs(p)], lmax[ls(p)] + rmax[rs(p)]});
	lmax[p] = max({lmax[ls(p)] + sum[rs(p)], lmax[rs(p)]});
	rmax[p] = max({rmax[rs(p)] + sum[ls(p)], rmax[ls(p)]});
	sum[p] = sum[ls(p)] + sum[rs(p)];
	// printf("ans[%lld] = %lld\n", p, ans[p]);
}

void build (ll p, ll l, ll r) {
	if (l == r) {
		ans[p] = a[l];
		lmax[p] = a[l];
		rmax[p] = a[l];
		sum[p] = a[l];
	} else {
		ll mid = l + ( (r - l) >> 1 );
		build(ls(p), l, mid);
		build(rs(p), mid + 1, r);
		push_up(p);
	}
} 

void update(ll p, ll pos, ll val, ll nl, ll nr) {
	// printf("p = %lld nl = %lld nr = %lld \n", p, nl, nr);
	if(nl == nr && nl == pos) {
		ans[p] = val;
		lmax[p] = val;
		rmax[p] = val;
		sum[p] = val;
	} else {
		ll mid = nl + ((nr - nl) >> 1);
		if(pos <= mid) update(ls(p), pos, val, nl, mid);
		if(pos >= mid + 1) update(rs(p), pos, val, mid + 1, nr);
		push_up(p);
		// printf("p = %lld nl = %lld nr = %lld ans =%lld\n", p, nl, nr, ans[p]);
	}
}

Node query(ll p, ll l, ll r, ll nl, ll nr) {
	// printf("%lld %lld %lld %lld\n",l, r,  nl, nr);
	if(nl >= l && nr <= r) return Node{ans[p], lmax[p], rmax[p], sum[p]};
	else {

		ll mid = nl + ((nr - nl) >> 1);
		if(r <= mid) return query(ls(p), l, r, nl, mid);
		else if(l >= mid + 1) return query(rs(p), l, r, mid + 1, nr);
		else {
			Node _new;
			Node qwq = query(ls(p), l, r, nl, mid);
			Node qaq = query(rs(p), l, r, mid + 1, nr);
			_new._ans = max({qwq._ans, qaq._ans, qwq._lmax + qaq._rmax});
			_new._lmax = max({qwq._lmax + qaq._sum, qaq._lmax});
			_new._rmax = max({qaq._rmax + qwq._sum, qwq._rmax});
			_new._sum = qwq._sum + qaq._sum;
			return _new;
		}
	}
}

int n, m;

int main() {
	cin >> n >> m;
	for(int i = 1; i <= n; ++i) cin >> a[i];
	build(1, 1, n);
	for(int i = 1; i <= m; ++i) {
		int opt, x, y;
		cin >> opt >> x >> y;
		
		if(opt == 2) {
			update(1, x, y, 1, n);
		} else {
			if(y <= x) swap(y, x);
			cout << query(1, x, y, 1, n)._ans << endl;
		}
	}
}

/*
245653 	  
172954 	
54998 	
172954 	
214652 	
88142 	
172954 	
238922 	
238922 	
179050 	
172954 	
64949 	
60441 	
172954 	
238922 	
172954 	
140334 	
172954 	
102613 	
207434 	
178430 	
26994 	
187067 	
180421 	
150260	
106222	
95635	
100626	
180421	
50096	
180421	
180421	
150260	
109917	
38637	
132832	
180421	
150260	
109252	
150260	
180421	
170405	
180421	
180421	
180421	
180421	
56546	
180421	
75506	
180421	
28364	
180421	
150260	
180421	
125359	
180421	
189576	
102550	
74307	
189576	
189576	
150260	
188538	
95635	
150260	
75676	
23443	
150260	
150260	
102550	
188827	
150260	
150260	
101870	
189128	
46131	
189128	
133809	
99464	
189128	
99464	
189128	
75676	
95635	
189128	
189128	
102550	
189128	
151469	
151469	
101474	
102550	
151469	
189128	
102550	
189128	
189128	
190184	
129271	
151469	
166575	
19176	
151469	
151469	
151469	
214849	
102550	
20529	
65172	
54409	
151469	
102550	
68865	
201281	
158100	
148537	
37370	
142758	
206775	
71642	
227240	
69575	
227240	
83405	
142758	
75077	
142758	
142758	
226471	
226471	
226471	
206275	
142758	
118933	
86696	
56040	
119195	
87996	
56040	
39893	
142758	
103043	
103043	
142758	
69467	
142758	
189487	
67879	
103043	
142758	
137312	
49021	
189148	
142758	
189148	
103043	
190119	
142758	
190119	
67879	
41704	
142758	
142758	
129004	
80403	
103043	
119195	
73385	
121951	
106199	
67879	
128016	
196332	
103043	
62111	
160038	
103043	
137103	
128016	
128016	
128016	
118579	
193204	
74656	
133845	
67879	
129151	
193204	
194177	
194177	
193204	
67879	
194177	
126258	
26212	
126258	
126258	
176832	
126258	
127298	
186657	
102694	
126258	
126258	
12684	
186657	
126258	
186657	
55490	
41869	
126258	
126258	
126258	
126258	
117402	
203171	
67879	
103043	
185762	
126258	
53556	
129661	
163129	
112415	
134627	
55550	
16232	
126258	
66618	
129911	
129911	
79064	
213707	
129911	
43643	
196298	
129911	
162361	
71870	
213707	
129911	
129911	
74656	
129911	
129911	
129911	
198795	
198795	
99235	
102273	
95254	
129911	
67690	
217122	
132049	
99235	
217122	
217122	
198795	
129911	
200101	
45255	
106183	
198795	
198795	
88099	
107697	
165517	
97877	
55610	
221292	
128785	
128785	
128785	
128785	
239805	
65775	
127942	
239805	
239805	
127942	
127942	
209086	
65346	
127942	
31681	
166514	
127942	
240380	
240380	
83943	
77997	
194080	
130836	
235899	
23589.	
*/
/*
50 19
773 760 -578 -302 -664 272 367 352 891 -569 429 -208 -325 38 148 456 -960 -390 470 271 763 -458 -52 647 -205 -514 399 -611 882 665 257 -718 233 -756 237 -301 650 148 -894 -212 -820 -341 -240 -620 320 932 -498 -252 323 -428
2 5 818
1 35 49
2 15 -87
1 31 48
1 44 37
1 10 25
2 28 -761
2 38 913
1 28 30
1 25 38
2 26 996
1 35 22
2 27 59
2 49 -754
1 22 3
2 7 -366
1 22 3
2 3 -822
1 22 3

1252 1252
1252 1252
798 798
1641 1641
1547 1547
2062 2062
3662 2880
2401 1967
5018 3628
1533 1533
650 650
4955 4955
1742 1742
1701 1701
5776 5776
1701 1349
456 456
741 741
5470 5470
5805 5805
5470 5425
5859 5859
1243 1243
5425 5425
5425 5425
5642 5642
3724 3724
-302 -302
4158 3162
4158 3103
4158 2392
2706 2706
5360 4343
1689 1689
3168 2897
2598 2598
7955 5873
5032 3789
1478 1478
1653 1653
-474 -474
5905 5905
-834 -834
-908 -908
-702 -702
-994 -994
-883 -883
-834 -834
-702 -702
-702 -702
-883 -883
-702 -702
-702 -702
-702 -702
-702 -702
-702 -702
-702 -702
*/